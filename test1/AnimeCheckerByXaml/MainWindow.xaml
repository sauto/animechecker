<Window x:Class="AnimeCheckerByXaml.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Name="_MainWindow"
        Title="アニメ視聴チェッカー" Height="350" Width="525">
    <Window.Resources>
        <Style x:Key="ToolBarPanelStyle1" TargetType="{x:Type ToolBarPanel}"/>
        <Style x:Key="CellYellowStyle" TargetType="{x:Type DataGridCell}" >
            <!--チェックボックスプロパティの値によって色塗りONOFFを変更-->
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Check}" Value="True" >
                    <Setter Property="Background" Value="Black" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Grid Name="MainPanel"  Margin="0,0,2,0" Loaded="Grid_Loaded">
        <Grid.ColumnDefinitions>
            <ColumnDefinition MinWidth="5"/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <!--<TextBox Grid.Column="0" Grid.Row="0" Margin="73,75,30,43"  TextAlignment="Center" RenderTransformOrigin="0.5,0.5"
                 Loaded="textBox0_Loaded" KeyDown="textBox0_KeyDown" Name="textBox0"
                   Text="{Binding Path=Time ,Mode=OneWay}" Background="#FF15BD88"/>

        <TextBox Grid.Column="0" Grid.Row="1" Margin="73,75,30,43"  Text="{Binding Path=Title ,Mode=OneWay}" TextAlignment="Center" RenderTransformOrigin="0.5,0.5"
                 KeyDown="TextBox_KeyDown" Name="textBox1">
            <TextBox.RenderTransform>
                <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform/>
                    <RotateTransform Angle="20"/>
                    <TranslateTransform/>
                </TransformGroup>
            </TextBox.RenderTransform>
        </TextBox>-->
        <!--<ListView Height="239" Margin="37,35,10,0" VerticalAlignment="Top" Grid.RowSpan="2" Grid.ColumnSpan="2"
                  ItemsSource="{Binding}">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition Width="150"/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <CheckBox Name="CheckBox" IsChecked="{Binding Path=Check ,Mode=TwoWay}" Grid.Column="0"/>
                        <TextBox Name="Title" Text="{Binding Path=Title ,Mode=TwoWay}" Grid.Column="1"/>
                        <TextBox Name="Time" Text="{Binding Path=Time ,Mode=TwoWay}" Grid.Column="2"/>
                        <TextBox Name="Day" Text="{Binding Path=Day ,Mode=TwoWay}" Grid.Column="3"/>
                        <TextBox Name="ID" Text="{Binding Path=ID ,Mode=TwoWay}" Grid.Column="4" Visibility="Collapsed"/>
                        <TextBox Name="Limit"  Grid.Column="5"/>
                    </Grid>
                    
                </DataTemplate>                
            </ListView.ItemTemplate>
            
            <ListView.View>
                <GridView>
                    <GridViewColumn Width="25"/>
                    <GridViewColumn Header="アニメ名" Width="100"/>
                </GridView>
            </ListView.View>
        </ListView>-->

        <!--<DataGrid>
            <DataGrid.Columns>
                <DataGridCheckBoxColumn x:Name="CheckBox" Binding="{Binding Path=Check ,Mode=TwoWay}"/>
                
            </DataGrid.Columns>
            
        </DataGrid>-->


        <!--
        AutoGenerateColumnsがtrueだとバインディングデータのクラスの順番を列順に一致させないとおかしくなる
        バインドしたクラスの全プロパティが反映される
        列ヘッダが自動的にプロパティ名になる
        ItemsSource="{Binding}"とした場合、DataContextに入れたObservableCollectionオブジェクトにバインドする
        -->
        <DataGrid x:Name="upperdatagrid" ItemsSource="{Binding}"  AutoGenerateColumns="False" 
                  Grid.ColumnSpan="2" Margin="42,30,60,54" CellEditEnding="datagrid_CellEditEnding" 
                  Grid.RowSpan="2" SelectionUnit="CellOrRowHeader"  AutoGeneratingColumn="DataGrid_AutoGeneratingColumn" 
                  Sorting="upperdatagrid_Sorting" >
            <DataGrid.Columns>
                <!--チェックボックスの場合はbool型プロパティにバインドしないといけない
                 UpdateSourceTriggerをPropertyChangedにしないとチェック時すぐにsetプロパティが起動しない
                CheckBoxColumnだとワンクリックでチェックがつかないのでTemplateColumnを使って中身のCheckBoxを直接置く
                -->
                
                <DataGridTemplateColumn Header="" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox IsChecked="{Binding Path=Check ,Mode=TwoWay ,UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn x:Name="Title" Binding="{Binding Path=Title ,Mode=TwoWay}" Header="タイトル"/>
                <DataGridTextColumn x:Name="Time" Binding="{Binding Path=Time ,Mode=TwoWay}" Header="視聴時間(分)"/>
                <DataGridTextColumn x:Name="Day" Binding="{Binding Path=Day ,Mode=TwoWay}" Header="放送曜日" />
                <DataGridTextColumn x:Name="ID" Binding="{Binding Path=ID ,Mode=TwoWay}" Header="ID" Visibility="Hidden"/>
                <DataGridTextColumn x:Name="Limit" Binding="{Binding Path=Limit ,Mode=TwoWay}"
                                    Header="視聴期限" IsReadOnly = "True">
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="{x:Type DataGridCell}">
                        <!--チェックボックスプロパティの値によって色塗りONOFFを変更-->
                        <Style.Triggers >
                            <DataTrigger Binding="{Binding Path=Check}" Value="True" >
                                <Setter Property="Background" Value="Black" />
                            </DataTrigger>
                        </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                        </DataGrid.Columns>
        </DataGrid>
        <Button x:Name="AddBottun" Content="Button" HorizontalAlignment="Left" Margin="42,126,0,0" Grid.Row="1" VerticalAlignment="Top" Width="75"/>
        <Expander Header="Expander" HorizontalAlignment="Left" VerticalAlignment="Top">
            <StackPanel Background="#FFFDFFDC">
                <Button DockPanel.Dock="Top" Margin="5,2,5,2" Width="90">Command A</Button>
                <Button x:Name="Botton1"  DockPanel.Dock="Top" Margin="5,2,5,2" Width="90" Height="38" >
                    <ContentPresenter
                HorizontalAlignment="Right"
                VerticalAlignment="Bottom">
                        
                    </ContentPresenter>
                </Button>
                <Button DockPanel.Dock="Top" Margin="5,2,5,2" Width="90" >Command C
                    <!--<Button.Style >
                        <Style TargetType="{StaticResource CellYellowStyle}"/>
                    </Button.Style>-->
                </Button>
                
            </StackPanel>
        </Expander>

    </Grid>
</Window>
