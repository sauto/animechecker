<Window x:Class="AnimeCheckerByXaml.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Name="_MainWindow"
        Title="アニメ視聴チェッカー" Height="350" Width="525" Closing="_MainWindow_Closing" SizeChanged="_MainWindow_SizeChanged" 
        SizeToContent="Manual">
    <Window.Resources>
        <Style x:Key="ToolBarPanelStyle1" TargetType="{x:Type ToolBarPanel}"/>
        <Style x:Key="CellYellowStyle" TargetType="{x:Type DataGridCell}" >
            <!--チェックボックスプロパティの値によって色塗りONOFFを変更-->
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Check}" Value="True" >
                    <Setter Property="Background" Value="Black" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <Window.CommandBindings>
        <!--Command="Save"だけでも可 http://www.atmarkit.co.jp/ait/articles/1011/09/news102_2.html-->
        <CommandBinding Command="{x:Static ApplicationCommands.Save}"
                    Executed="CommandBinding_ExecutedSave" />
        <CommandBinding Command="{x:Static ApplicationCommands.Close}"
                    Executed="CommandBinding_ExecutedClose" />
    </Window.CommandBindings>

    <Window.InputBindings>
        <KeyBinding Gesture="Ctrl+R" Command="{Binding AddRowCommand}" CommandParameter="{Binding ElementName=MainPanel}"/>
        <KeyBinding Gesture="Ctrl+D" Command="{Binding DeleteRowCommand}" CommandParameter="{Binding ElementName=MainPanel}"/>
    </Window.InputBindings>

    <Canvas Name="MainPanel"  Margin="8,0,2,8" Loaded="Grid_Loaded" KeyDown="MainPanel_KeyDown" >


        <Canvas.InputBindings>
            <KeyBinding Gesture="Ctrl+R" Command="{Binding AddRowCommand}" CommandParameter="{Binding ElementName=MainPanel}"/>
            <KeyBinding Gesture="Ctrl+D" Command="{Binding DeleteRowCommand}" CommandParameter="{Binding ElementName=MainPanel}"/>
        </Canvas.InputBindings>

        <!--SourceはResourceフォルダの画像ファイルのビルドアクションをResourceにする必要がある-->
        <Image HorizontalAlignment="Left"  Margin="10,10,0,-55" VerticalAlignment="Top"
               Name="pictureBox" Source="./Resources/白紙.png" Stretch="Uniform" 
               AllowDrop="True" Drop="pictureBox_Drop" PreviewDragOver="pictureBox_PreviewDragOver"/>

        <Button x:Name="AddBottun" Content="行の追加" Height="25" Width="75" HorizontalAlignment="Left"  VerticalAlignment="Top" Grid.Row="1" Grid.ColumnSpan="2" Grid.RowSpan="2"  
                Command="{Binding AddRowCommand}" CommandParameter="{Binding ElementName=MainPanel}" Initialized="AddBottun_Initialized" Canvas.Left="42" Canvas.Top="277" />

        <Button x:Name="DeleteBottun" Content="選択行の削除" HorizontalAlignment="Left" Grid.Row="1" VerticalAlignment="Top" Height="25" Width="87"
        	Command="{Binding DeleteRowCommand}" CommandParameter="{Binding ElementName=MainPanel}" Initialized="DeleteBottun_Initialized" Canvas.Left="150" Canvas.Top="277"  />

        <Button x:Name="SaveBottun" Content="保存" HorizontalAlignment="Left" Grid.Row="1" VerticalAlignment="Top" Height="25" Width="87"
        	Command="{x:Static ApplicationCommands.Save}" Grid.ColumnSpan="2" Initialized="SaveBottun_Initialized" Canvas.Left="255" Canvas.Top="277" />

        <Border x:Name="TextBorder" Width="auto" Padding="6"
            BorderThickness="2" CornerRadius="8" Height="24" HorizontalAlignment="Left" VerticalAlignment="Top"
            Background="#FFCFFDEE" BorderBrush="Black"
                Canvas.Left="354" Canvas.Top="275"
                Initialized="TextBorder_Initialized"
                >

            <TextBlock x:Name="RestTimeText" TextWrapping="Wrap" Text="残り時間"  VerticalAlignment="Stretch"
                   HorizontalAlignment="Center" Width="auto"
                   RenderTransformOrigin="0.07,0.611" TextAlignment="Center" Margin="-3,-5,-3,-8"/>

        </Border>

        <!--
        AutoGenerateColumnsがtrueだとバインディングデータのクラスの順番を列順に一致させないとおかしくなる
        バインドしたクラスの全プロパティが反映される
        列ヘッダが自動的にプロパティ名になる
        ItemsSource="{Binding}"とした場合、DataContextに入れたObservableCollectionオブジェクトにバインドする
        -->
        <DataGrid x:Name="upperdatagrid" 
                  ItemsSource="{Binding}" 
                  AutoGenerateColumns="False" 
                  Height="200" Width="300" HorizontalAlignment="Left" VerticalAlignment="Top"
                  Grid.ColumnSpan="2" Canvas.Left="42" Canvas.Top="30" CellEditEnding="datagrid_CellEditEnding" 
                  Grid.RowSpan="2" SelectionUnit="CellOrRowHeader"
                  Sorting="upperdatagrid_Sorting" PreviewKeyDown="upperdatagrid_PreviewKeyDown" 
                  SelectedCellsChanged="upperdatagrid_SelectedCellsChanged" Loaded="upperdatagrid_Loaded" Initialized="upperdatagrid_Initialized" 
                  MinHeight="55" MinWidth="55"  CanUserAddRows="False" CanUserDeleteRows="False" Background="#FFF7F7F7" BorderThickness="8" BorderBrush="#FF86C0F7"
                  >
            <DataGrid.ContextMenu>
                <ContextMenu Name="contextMenu">
                    <MenuItem Header="選択行の削除" Command="{Binding DeleteRowCommand}" CommandParameter="{Binding ElementName=MainPanel}"/>
                    <MenuItem Header="行の追加" Command="{Binding AddRowCommand}" CommandParameter="{Binding ElementName=MainPanel}"/>
                    <MenuItem Header="コピー"/>
                    <MenuItem Header="ペースト"/>
                </ContextMenu>
            </DataGrid.ContextMenu>
            <DataGrid.InputBindings>
                <KeyBinding Gesture="Ctrl+R" Command="{Binding AddRowCommand}" CommandParameter="{Binding ElementName=MainPanel}"/>
                <KeyBinding Gesture="Ctrl+D" Command="{Binding DeleteRowCommand}" CommandParameter="{Binding ElementName=MainPanel}"/>
            </DataGrid.InputBindings>
            <DataGrid.Columns>
                <!--チェックボックスの場合はbool型プロパティにバインドしないといけない
                 UpdateSourceTriggerをPropertyChangedにしないとチェック時すぐにsetプロパティが起動しない
                CheckBoxColumnだとワンクリックでチェックがつかないのでTemplateColumnを使って中身のCheckBoxを直接置く-->

                <DataGridTemplateColumn x:Name="Check"  Header="" ClipboardContentBinding="{Binding Path=Check ,Mode=TwoWay ,UpdateSourceTrigger=PropertyChanged}"
                                        >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox IsChecked="{Binding Path=Check ,Mode=TwoWay ,UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Center" VerticalAlignment="Center" Click="CheckBox_Click" 
                                      Checked="CheckBox_Checked" Unchecked="CheckBox_Unchecked"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn x:Name="Title" Binding="{Binding Path=Title ,Mode=TwoWay}" Header="タイトル" PastingCellClipboardContent="Title_PastingCellClipboardContent" />
                <DataGridTextColumn x:Name="Time" Binding="{Binding Path=Time ,Mode=TwoWay}" Header="視聴時間(分)" PastingCellClipboardContent="Time_PastingCellClipboardContent"/>
                <DataGridTextColumn x:Name="Day" Binding="{Binding Path=Day ,Mode=TwoWay}" Header="放送曜日" PastingCellClipboardContent="Day_PastingCellClipboardContent" />
                <DataGridTextColumn x:Name="ID" Binding="{Binding Path=ID ,Mode=TwoWay}" Header="ID" Visibility="Hidden"/>
                <DataGridTextColumn x:Name="Limit" Binding="{Binding Path=Limit ,Mode=TwoWay}"
                                    Header="視聴期限" IsReadOnly = "True">
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="{x:Type DataGridCell}">
                            <!--チェックボックスプロパティの値によって色塗りONOFFを変更-->
                            <Style.Triggers >
                                <DataTrigger Binding="{Binding Path=Check}" Value="True" >
                                    <Setter Property="Background" Value="Black" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
            </DataGrid.Columns>
        </DataGrid>

        <Menu HorizontalAlignment="Left" Height="23" VerticalAlignment="Top" Width="141" Margin="0,0,0,0">
            <MenuItem x:Name="menu" Height="auto" Width="65" Header="メニュー" Background="AliceBlue">
                <MenuItem HorizontalAlignment="Stretch" Width="auto" Margin="0,0,-4,0" 
                          Command="{x:Static ApplicationCommands.Save}" />
                <!--上の方のWindow.CommandBindings内のルーティング・コマンドを実行
                UI名も勝手に変更される-->
                <MenuItem HorizontalAlignment="Stretch" Width="auto" Margin="0,0,-4,0" 
                          Command="{x:Static ApplicationCommands.Close}" InputGestureText="Alt+F4"/>

                <MenuItem Header="行の追加" HorizontalAlignment="Stretch" Width="auto" Margin="0,0,-4,0" 
                          Command="{Binding AddRowCommand}" CommandParameter="{Binding ElementName=MainPanel}" InputGestureText="Ctrl+R"
                          />
                <MenuItem Header="選択行の削除" HorizontalAlignment="Left" Width="auto" Margin="0,0,-4,0" 
                          Command="{Binding DeleteRowCommand}" CommandParameter="{Binding ElementName=MainPanel}" InputGestureText="Ctrl+D"
                          />
            </MenuItem>
            <MenuItem x:Name="option" Height="auto" Width="auto" Header="オプション" Background="Beige">
                <MenuItem x:Name="LayoutReset" Header="レイアウトリセット" HorizontalAlignment="Stretch" Width="auto" Margin="0,0,-4,0" 
                           InputGestureText="Ctrl+I" Click="LayoutReset_Click"/>

                <MenuItem x:Name="LayoutFix" Header="レイアウトの固定" HorizontalAlignment="Stretch" Width="auto" Margin="0,0,-4,0" 
                          InputGestureText="Ctrl+F" IsChecked="False" Click="LayoutFix_Click" Checked="LayoutFix_Checked" Unchecked="LayoutFix_Unchecked"
                          />
                <MenuItem x:Name="AllCheckUnChecked" Header="全てのチェックを外す" HorizontalAlignment="Left" Width="auto" Margin="0,0,-4,0" 
                          InputGestureText="Ctrl+O" Click="AllCheckUnChecked_Click"
                          />
            </MenuItem>
        </Menu>
        <StatusBar Name="statusBar"  Height="27" Canvas.Top="293" Width="500" Canvas.Left="-10">
            <StatusBarItem Name="dataNumDisplay" Content="StatusBarItem" Height="27" VerticalAlignment="Top"/>
        </StatusBar>




    </Canvas>
</Window>
